/* -LICENSE-START-
 ** Copyright (c) 2016 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 ** 
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 ** 
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#include <include/BMDSDITallyControl.h>
#include <include/BMDSDIControlShieldRegisters.h>

namespace BMD
{
	void SDITallyControl::setOverride(bool enabled) const
	{
		byte regValue = regRead8(kRegCONTROL);

		if (enabled)
			regValue |=  kRegCONTROL_TOVERIDE_Mask;
		else
			regValue &= ~kRegCONTROL_TOVERIDE_Mask;

		regWrite8(kRegCONTROL, regValue);
	}

	bool SDITallyControl::available() const
	{
		return (regRead8(kRegITARM) & kRegITARM_ARM_Mask) == 0;
	}

	bool SDITallyControl::availableForWrite() const
	{
		return (regRead8(kRegOTARM) & kRegOTARM_ARM_Mask) == 0;
	}

	int SDITallyControl::read(byte data[], int dataLength) const
	{
		if (! available())
			return 0;

		// Read tally incoming length and data
		int availableLength = regRead16(kRegITLENGTH);
		if (availableLength > dataLength)
			return -1;

		regRead(kRegITDATA, data, availableLength);

		// Arm the tally incoming bank
		regWrite8(kRegITARM, kRegITARM_ARM_Mask);

		return availableLength;
	}

	void SDITallyControl::write(const byte data[], int dataLength) const
	{
		while (! availableForWrite())
		{
			// Wait for tally override bank to become ready for new data
		}

		// Set up tally override length and data
		regWrite16(kRegOTLENGTH, dataLength);
		regWrite(kRegOTDATA, data, dataLength);

		// Arm the tally override bank
		regWrite8(kRegOTARM, kRegOTARM_ARM_Mask);
	}

	void SDITallyControl::reset() const
	{
		byte regValue = regRead8(kRegCONTROL);

		regValue |= kRegCONTROL_TRESET_Mask;

		regWrite8(kRegCONTROL, regValue);
	}

	bool SDITallyControl::getCameraTally(int cameraNumber, bool& programTally, bool& previewTally) const
	{
		programTally = false;
		previewTally = false;

		if (! available())
			return false;

		// Reject invalid camera numbers
		if (cameraNumber <= 0 || cameraNumber > (int)kRegITDATA_Width)
			return false;

		// Reject camera numbers where no tally data is available
		int length = regRead16(kRegITLENGTH);
		if (length >= cameraNumber)
		{
			// Convert the packed bitfield to tally values
			uint8_t data = regRead8(kRegITDATA + (cameraNumber - 1));
			programTally = data & (1 << 0);
			previewTally = data & (1 << 1);
		}

		// Arm the tally override bank
		regWrite8(kRegITARM, kRegITARM_ARM_Mask);

		return (length >= cameraNumber);
	}

	void SDITallyControl::setCameraTally(int cameraNumber, bool programTally, bool previewTally) const
	{
		while (! availableForWrite())
		{
			// Wait for tally override bank to become ready for new data
		}

		// Reject invalid camera numbers
		if (cameraNumber <= 0 || cameraNumber > (int)kRegOTDATA_Width)
			return;

		// Expand the tally data length if required
		int length = regRead16(kRegOTLENGTH);
		if (length < cameraNumber)
		{
			length = cameraNumber;
			regWrite16(kRegOTLENGTH, length);
		}

		// Convert the tally values to a packed bitfield
		uint8_t data = 0;
		if (programTally)
			data |= (1 << 0);
		if (previewTally)
			data |= (1 << 1);

		// Update the requested camera's tally info
		regWrite8(kRegOTDATA + (cameraNumber - 1), data);

		// Arm the tally override bank
		regWrite8(kRegOTARM, kRegOTARM_ARM_Mask);
	}
}
