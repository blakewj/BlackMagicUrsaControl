/* -LICENSE-START-
 ** Copyright (c) 2016 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 ** 
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 ** 
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#pragma once

#include <Arduino.h>
#include <stdint.h>

namespace BMD
{
	struct Version
	{
		uint16_t Major;
		uint16_t Minor;
	};

	class SDIControlShield
	{
	public:
		virtual void		begin() const;

		/** Version information */
		Version				getLibraryVersion() const;
		Version				getProtocolVersion() const;
		Version				getFirmwareVersion() const;

		/** System control */
		void				setOutputSignalOverride(bool enabled) const;
		bool				getOutputSignalOverride() const;

		/** Abstract low level register read/write access */
		virtual uint32_t	regRead32(uint16_t address) const = 0;
		virtual void		regWrite32(uint16_t address, uint32_t value) const = 0;
		virtual uint16_t	regRead16(uint16_t address) const = 0;
		virtual void		regWrite16(uint16_t address, uint16_t value) const = 0;
		virtual uint8_t		regRead8(uint16_t address) const = 0;
		virtual void		regWrite8(uint16_t address, uint8_t value) const = 0;
		virtual void		regRead(uint16_t address, uint8_t values[], int length) const = 0;
		virtual void		regWrite(uint16_t address, const uint8_t values[], int length) const = 0;

		/* Endianness conversions */
		template <typename T>
		void				toLittleEndian(byte* payload, const T& value) const;
		template <typename T>
		void				fromLittleEndian(const byte* payload, T& value) const;
	};


	template <typename T>
	void SDIControlShield::toLittleEndian(byte* payload, const T& value) const
	{
		for (int i = 0; i < sizeof(T); i++)
			payload[i] = (value >> (8 * i)) & 0xFF;
	}

	template <typename T>
	void SDIControlShield::fromLittleEndian(const byte* payload, T& value) const
	{
		value = 0;

		for (int i = 0; i < sizeof(T); i++)
			value |= payload[i] << (8 * i);
	}
}
