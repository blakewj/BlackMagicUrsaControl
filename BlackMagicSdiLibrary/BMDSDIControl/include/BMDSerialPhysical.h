/* -LICENSE-START-
 ** Copyright (c) 2016 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 ** 
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 ** 
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#pragma once

#include <stdint.h>
#include <Arduino.h>

namespace BMD
{
	template <typename T>
	class SerialPhysical : public T
	{
	public:
		// Inherits from T
		virtual void		begin();
		virtual uint32_t	regRead32(uint16_t address) const;
		virtual void		regWrite32(uint16_t address, uint32_t value) const;
		virtual uint16_t	regRead16(uint16_t address) const;
		virtual void		regWrite16(uint16_t address, uint16_t value) const;
		virtual uint8_t		regRead8(uint16_t address) const;
		virtual void		regWrite8(uint16_t address, uint8_t value) const;
		virtual void		regRead(uint16_t address, uint8_t values[], int length) const;
		virtual void		regWrite(uint16_t address, const uint8_t values[], int length) const;

	private:
		enum
		{
			kSync1Value = 0xDC,
			kSync2Value = 0x42,
		};
	};

	template <typename T>
	void SerialPhysical<T>::begin()
	{
		Serial.begin(38400);

		T::begin();
	}

	template <typename T>
	uint32_t SerialPhysical<T>::regRead32(uint16_t address) const
	{
		uint8_t regBytes[4];

		uint8_t request[] = {
			kSync1Value,
			kSync2Value,
			(uint8_t)(address & 0xFF),
			(uint8_t)(address >> 8),
			'R',
			4,
			0
		};
		Serial.write(request, sizeof(request));

		Serial.flush();

		while (Serial.available() < 4);
		regBytes[0] = Serial.read();
		regBytes[1] = Serial.read();
		regBytes[2] = Serial.read();
		regBytes[3] = Serial.read();

		return ((uint32_t)regBytes[3] << 24) | ((uint32_t)regBytes[2] << 16) | ((uint32_t)regBytes[1] << 8) | regBytes[0];
	}

	template <typename T>
	void SerialPhysical<T>::regWrite32(uint16_t address, uint32_t value) const
	{
		uint8_t request[] = {
			kSync1Value,
			kSync2Value,
			(uint8_t)(address & 0xFF),
			(uint8_t)(address >> 8),
			'W',
			4,
			0
		};
		Serial.write(request, sizeof(request));
		Serial.write(value >> 0);
		Serial.write(value >> 8);
		Serial.write(value >> 16);
		Serial.write(value >> 24);

		Serial.flush();
	}

	template <typename T>
	uint16_t SerialPhysical<T>::regRead16(uint16_t address) const
	{
		uint8_t regBytes[2];

		uint8_t request[] = {
			kSync1Value,
			kSync2Value,
			(uint8_t)(address & 0xFF),
			(uint8_t)(address >> 8),
			'R',
			2,
			0
		};
		Serial.write(request, sizeof(request));

		Serial.flush();

		while (Serial.available() < 2);
		regBytes[0] = Serial.read();
		regBytes[1] = Serial.read();

		return ((uint16_t)regBytes[1] << 8) | regBytes[0];
	}

	template <typename T>
	void SerialPhysical<T>::regWrite16(uint16_t address, uint16_t value) const
	{
		uint8_t request[] = {
			kSync1Value,
			kSync2Value,
			(uint8_t)(address & 0xFF),
			(uint8_t)(address >> 8),
			'W',
			2,
			0
		};
		Serial.write(request, sizeof(request));
		Serial.write(value >> 0);
		Serial.write(value >> 8);

		Serial.flush();
	}

	template <typename T>
	uint8_t	SerialPhysical<T>::regRead8(uint16_t address) const
	{
		uint8_t request[] = {
			kSync1Value,
			kSync2Value,
			(uint8_t)(address & 0xFF),
			(uint8_t)(address >> 8),
			'R',
			1,
			0
		};
		Serial.write(request, sizeof(request));

		Serial.flush();

		while (Serial.available() < 1);
		return Serial.read();
	}

	template <typename T>
	void SerialPhysical<T>::regWrite8(uint16_t address, uint8_t value) const
	{
		uint8_t request[] = {
			kSync1Value,
			kSync2Value,
			(uint8_t)(address & 0xFF),
			(uint8_t)(address >> 8),
			'W',
			1,
			0
		};
		Serial.write(request, sizeof(request));
		Serial.write(value);

		Serial.flush();
	}

	template <typename T>
	void SerialPhysical<T>::regRead(uint16_t address, uint8_t values[], int length) const
	{
		uint8_t request[] = {
			kSync1Value,
			kSync2Value,
			(uint8_t)(address & 0xFF),
			(uint8_t)(address >> 8),
			'R',
			(uint8_t)length,
			0
		};
		Serial.write(request, sizeof(request));

		Serial.flush();

		for (int i = 0; i < length; i++)
		{
			while (Serial.available() < 1);
			values[i] = Serial.read();
		}
	}

	template <typename T>
	void SerialPhysical<T>::regWrite(uint16_t address, const uint8_t values[], int length) const
	{
		uint8_t request[] = {
			kSync1Value,
			kSync2Value,
			(uint8_t)(address & 0xFF),
			(uint8_t)(address >> 8),
			'W',
			(uint8_t)length,
			0
		};
		Serial.write(request, sizeof(request));
		Serial.write(values, length);

		Serial.flush();
	}
}
