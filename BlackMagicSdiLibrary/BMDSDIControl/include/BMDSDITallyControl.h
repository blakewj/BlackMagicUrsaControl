/* -LICENSE-START-
 ** Copyright (c) 2016 Blackmagic Design
 **
 ** Permission is hereby granted, free of charge, to any person or organization
 ** obtaining a copy of the software and accompanying documentation covered by
 ** this license (the "Software") to use, reproduce, display, distribute,
 ** execute, and transmit the Software, and to prepare derivative works of the
 ** Software, and to permit third-parties to whom the Software is furnished to
 ** do so, all subject to the following:
 ** 
 ** The copyright notices in the Software and this entire statement, including
 ** the above license grant, this restriction and the following disclaimer,
 ** must be included in all copies of the Software, in whole or in part, and
 ** all derivative works of the Software, unless such copies or derivative
 ** works are solely in the form of machine-executable object code generated by
 ** a source language processor.
 ** 
 ** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 ** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 ** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 ** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 ** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 ** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 ** DEALINGS IN THE SOFTWARE.
 ** -LICENSE-END-
 */

#pragma once

#include <include/BMDSDIControlShield.h>
#include <Arduino.h>
#include <stdint.h>

namespace BMD
{
	class SDITallyControl : public SDIControlShield
	{
	public:
		/** Tally setup */
		void		setOverride(bool enabled) const;

		/** Low level tally read operations */
		bool		available() const;
		int			read(byte data[], int dataLength) const;
		template <unsigned N>
		int			read(byte (&data)[N]) const;
		void		flushRead() const;

		/** Low level tally write operations */
		bool		availableForWrite() const;
		void		write(const byte data[], int dataLength) const;
		template <unsigned N>
		void		write(const byte (&data)[N]) const;
		void		flushWrite() const;
		void		reset() const;

		/** High level tally write operation */
		bool		getCameraTally(int cameraNumber, bool& programTally, bool& previewTally) const;
		void		setCameraTally(int cameraNumber, bool programTally, bool previewTally) const;
	};


	template <unsigned N>
	int SDITallyControl::read(byte (&data)[N]) const
	{
		return read(data, N);
	}

	template <unsigned N>
	void SDITallyControl::write(const byte (&data)[N]) const
	{
		write(data, N);
	}
}
